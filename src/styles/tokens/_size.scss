@use "/.theme" as *;

$list-of-font-size: map-get($theme, font_size);
$font-weight: map-get($theme, font_weight);
$border-radius: map-get($theme, border_radius);
$letter-spacing: map-get($theme, letter_spacing);

@function remove-default($name) {
  @if ($name == "DEFAULT") {
    @return "";
  }
  @return -#{$name};
}

@mixin size-from-list($name, $list) {
  @each $type-that-can-have-default, $value in $list {
    $type: remove-default($type-that-can-have-default);
    --#{$name}#{$type}: #{$value};
  }
}

@mixin font-size-and-height() {
  @each $font-size-names-with-default, $font-size-values in $list-of-font-size {
    $get-size: map-get($font-size-values, size);
    $get-height: map-get($font-size-values, height);

    $font-size-names: remove-default($font-size-names-with-default);

    --text#{$font-size-names}: #{$get-size};
    --landing#{$font-size-names}: #{$get-height};
  }
}


@mixin font-size($size) {
  @each $font-size-names-with-default, $font-size-values in $list-of-font-size {
    $get-size: map-get($font-size-values, size);
    $get-height: map-get($font-size-values, height);

    $font-size-names: remove-default($font-size-names-with-default);

    @if $get-size == $size {
      font-size: var(--text#{$font-size-names});
      line-height: var(--landing#{$font-size-names});
    }
  }
}
